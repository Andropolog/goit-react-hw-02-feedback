{"version":3,"sources":["components/Feedback/Section/Section.js","components/Feedback/Statistics/Statistics.js","components/Feedback/Notification/Notification.js","components/Feedback/FeedbackOptions/OptionButton.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Feedback.js","components/App.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","OptionButton","name","onClickAction","type","onClick","style","marginRight","FeedbackOptions","options","onLeaveFeedback","map","el","Feedback","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","updateState","setState","prevState","handleFeedback","e","actionName","target","this","Object","keys","Component","App","ReactDOM","render","document","querySelector"],"mappings":"8LAsBeA,EAlBC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,MCeQE,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,SCEdC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCgBEC,EAlBM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,cAC5B,OACE,wBACEC,KAAK,SACLF,KAAMA,EACNG,QAASF,EACTG,MAAO,CAAEC,YAAa,IAJxB,SAMGL,KCQQM,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAE,OACb,cAAC,EAAD,CAAuBV,KAAMU,EAAIT,cAAeO,GAA7BE,SCFNC,E,4MACnBC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,mBAAqB,WACnB,MAA+B,EAAKD,MACpC,OADA,EAAQpB,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBoB,gCAAkC,WAChC,IAAQtB,EAAS,EAAKoB,MAAdpB,KACR,MAAM,GAAN,OAAUuB,KAAKC,MAAOxB,EAAO,EAAKqB,qBAAwB,KAA1D,M,EAGFI,YAAc,SAAAjB,GACZ,EAAKkB,UAAS,SAAAC,GAAS,sBACpBnB,EAAOmB,EAAUnB,GAAQ,O,EAI9BoB,eAAiB,SAAAC,GACf,IAAMC,EAAaD,EAAEE,OAAOvB,KAC5B,EAAKiB,YAAYK,I,4CAGnB,WACE,MAA+BE,KAAKZ,MAA5BpB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBa,EAAUkB,OAAOC,KAAKF,KAAKZ,OAEjC,OACE,eAAC,EAAD,CAASxB,MAAM,wBAAf,UACE,cAAC,EAAD,CACEmB,QAASA,EACTC,gBAAiBgB,KAAKJ,iBAGxB,oBAAI9B,UAAU,aAAd,wBAECkC,KAAKX,qBACJ,cAAC,EAAD,CACErB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO6B,KAAKX,qBACZjB,mBAAoB4B,KAAKV,oCAG3B,cAAC,EAAD,CAAchB,QAAQ,6B,GAlDM6B,aCGvBC,EALH,kBACV,8BACE,cAAC,EAAD,O,MCAJC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.13575d88.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h3 className=\"title\">{title}</h3>\n      {children}\n    </div>\n  );\n};\n\n// Section.defaultProps = {\n//   children: null,\n// };\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.arrayOf(PropTypes.element),\n};\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statistics;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst OptionButton = ({ name, onClickAction }) => {\n  return (\n    <button\n      type=\"button\"\n      name={name}\n      onClick={onClickAction}\n      style={{ marginRight: 10 }}\n    >\n      {name}\n    </button>\n  );\n};\n\nOptionButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default OptionButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OptionButton from './OptionButton';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div>\n      {options.map(el => (\n        <OptionButton key={el} name={el} onClickAction={onLeaveFeedback} />\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;","import React, { Component } from 'react';\nimport Section from './Section/Section';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\n\nexport default class Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return `${Math.floor((good / this.countTotalFeedback()) * 100)}%`;\n  };\n\n  updateState = name => {\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  handleFeedback = e => {\n    const actionName = e.target.name;\n    this.updateState(actionName);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={this.handleFeedback}\n        />\n\n        <h3 className=\"statistics\">Statistics</h3>\n\n        {this.countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    );\n  }\n}","\nimport React from 'react';\nimport Feedback from './Feedback/Feedback';\n\nconst App = () => (\n  <div>\n    <Feedback />\n  </div>\n);\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}